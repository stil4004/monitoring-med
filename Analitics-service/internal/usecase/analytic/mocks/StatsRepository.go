// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	model "service/pkg/model"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// StatsRepository is an autogenerated mock type for the StatsRepository type
type StatsRepository struct {
	mock.Mock
}

type StatsRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *StatsRepository) EXPECT() *StatsRepository_Expecter {
	return &StatsRepository_Expecter{mock: &_m.Mock}
}

// CheckMetricExists provides a mock function with given fields: ctx, metricName
func (_m *StatsRepository) CheckMetricExists(ctx context.Context, metricName string) (bool, error) {
	ret := _m.Called(ctx, metricName)

	if len(ret) == 0 {
		panic("no return value specified for CheckMetricExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, metricName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, metricName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, metricName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StatsRepository_CheckMetricExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckMetricExists'
type StatsRepository_CheckMetricExists_Call struct {
	*mock.Call
}

// CheckMetricExists is a helper method to define mock.On call
//   - ctx context.Context
//   - metricName string
func (_e *StatsRepository_Expecter) CheckMetricExists(ctx interface{}, metricName interface{}) *StatsRepository_CheckMetricExists_Call {
	return &StatsRepository_CheckMetricExists_Call{Call: _e.mock.On("CheckMetricExists", ctx, metricName)}
}

func (_c *StatsRepository_CheckMetricExists_Call) Run(run func(ctx context.Context, metricName string)) *StatsRepository_CheckMetricExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *StatsRepository_CheckMetricExists_Call) Return(_a0 bool, _a1 error) *StatsRepository_CheckMetricExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StatsRepository_CheckMetricExists_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *StatsRepository_CheckMetricExists_Call {
	_c.Call.Return(run)
	return _c
}

// GetLastNStats provides a mock function with given fields: ctx, metricName, n
func (_m *StatsRepository) GetLastNStats(ctx context.Context, metricName string, n int) ([]model.Stat, error) {
	ret := _m.Called(ctx, metricName, n)

	if len(ret) == 0 {
		panic("no return value specified for GetLastNStats")
	}

	var r0 []model.Stat
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) ([]model.Stat, error)); ok {
		return rf(ctx, metricName, n)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int) []model.Stat); ok {
		r0 = rf(ctx, metricName, n)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Stat)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int) error); ok {
		r1 = rf(ctx, metricName, n)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StatsRepository_GetLastNStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastNStats'
type StatsRepository_GetLastNStats_Call struct {
	*mock.Call
}

// GetLastNStats is a helper method to define mock.On call
//   - ctx context.Context
//   - metricName string
//   - n int
func (_e *StatsRepository_Expecter) GetLastNStats(ctx interface{}, metricName interface{}, n interface{}) *StatsRepository_GetLastNStats_Call {
	return &StatsRepository_GetLastNStats_Call{Call: _e.mock.On("GetLastNStats", ctx, metricName, n)}
}

func (_c *StatsRepository_GetLastNStats_Call) Run(run func(ctx context.Context, metricName string, n int)) *StatsRepository_GetLastNStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int))
	})
	return _c
}

func (_c *StatsRepository_GetLastNStats_Call) Return(_a0 []model.Stat, _a1 error) *StatsRepository_GetLastNStats_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StatsRepository_GetLastNStats_Call) RunAndReturn(run func(context.Context, string, int) ([]model.Stat, error)) *StatsRepository_GetLastNStats_Call {
	_c.Call.Return(run)
	return _c
}

// GetStatsInRange provides a mock function with given fields: ctx, metricName, start, end
func (_m *StatsRepository) GetStatsInRange(ctx context.Context, metricName string, start time.Time, end time.Time) ([]model.Stat, error) {
	ret := _m.Called(ctx, metricName, start, end)

	if len(ret) == 0 {
		panic("no return value specified for GetStatsInRange")
	}

	var r0 []model.Stat
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time, time.Time) ([]model.Stat, error)); ok {
		return rf(ctx, metricName, start, end)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time, time.Time) []model.Stat); ok {
		r0 = rf(ctx, metricName, start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Stat)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, time.Time, time.Time) error); ok {
		r1 = rf(ctx, metricName, start, end)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StatsRepository_GetStatsInRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStatsInRange'
type StatsRepository_GetStatsInRange_Call struct {
	*mock.Call
}

// GetStatsInRange is a helper method to define mock.On call
//   - ctx context.Context
//   - metricName string
//   - start time.Time
//   - end time.Time
func (_e *StatsRepository_Expecter) GetStatsInRange(ctx interface{}, metricName interface{}, start interface{}, end interface{}) *StatsRepository_GetStatsInRange_Call {
	return &StatsRepository_GetStatsInRange_Call{Call: _e.mock.On("GetStatsInRange", ctx, metricName, start, end)}
}

func (_c *StatsRepository_GetStatsInRange_Call) Run(run func(ctx context.Context, metricName string, start time.Time, end time.Time)) *StatsRepository_GetStatsInRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Time), args[3].(time.Time))
	})
	return _c
}

func (_c *StatsRepository_GetStatsInRange_Call) Return(_a0 []model.Stat, _a1 error) *StatsRepository_GetStatsInRange_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StatsRepository_GetStatsInRange_Call) RunAndReturn(run func(context.Context, string, time.Time, time.Time) ([]model.Stat, error)) *StatsRepository_GetStatsInRange_Call {
	_c.Call.Return(run)
	return _c
}

// WriteStat provides a mock function with given fields: ctx, stat
func (_m *StatsRepository) WriteStat(ctx context.Context, stat model.Stat) error {
	ret := _m.Called(ctx, stat)

	if len(ret) == 0 {
		panic("no return value specified for WriteStat")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Stat) error); ok {
		r0 = rf(ctx, stat)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StatsRepository_WriteStat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteStat'
type StatsRepository_WriteStat_Call struct {
	*mock.Call
}

// WriteStat is a helper method to define mock.On call
//   - ctx context.Context
//   - stat model.Stat
func (_e *StatsRepository_Expecter) WriteStat(ctx interface{}, stat interface{}) *StatsRepository_WriteStat_Call {
	return &StatsRepository_WriteStat_Call{Call: _e.mock.On("WriteStat", ctx, stat)}
}

func (_c *StatsRepository_WriteStat_Call) Run(run func(ctx context.Context, stat model.Stat)) *StatsRepository_WriteStat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Stat))
	})
	return _c
}

func (_c *StatsRepository_WriteStat_Call) Return(_a0 error) *StatsRepository_WriteStat_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StatsRepository_WriteStat_Call) RunAndReturn(run func(context.Context, model.Stat) error) *StatsRepository_WriteStat_Call {
	_c.Call.Return(run)
	return _c
}

// NewStatsRepository creates a new instance of StatsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStatsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *StatsRepository {
	mock := &StatsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
