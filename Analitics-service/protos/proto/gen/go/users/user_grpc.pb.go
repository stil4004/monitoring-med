// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: users/user.proto

package user_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserService_AddNotice_FullMethodName                          = "/user_service.UserService/AddNotice"
	UserService_VerifyTOTPByUserID_FullMethodName                 = "/user_service.UserService/VerifyTOTPByUserID"
	UserService_GetUserNicknameByID_FullMethodName                = "/user_service.UserService/GetUserNicknameByID"
	UserService_GetUserByID_FullMethodName                        = "/user_service.UserService/GetUserByID"
	UserService_GetUserIDByAccessToken_FullMethodName             = "/user_service.UserService/GetUserIDByAccessToken"
	UserService_GetUserByAccessToken_FullMethodName               = "/user_service.UserService/GetUserByAccessToken"
	UserService_GetUserByNicknameWithID_FullMethodName            = "/user_service.UserService/GetUserByNicknameWithID"
	UserService_GetUserByNicknameFull_FullMethodName              = "/user_service.UserService/GetUserByNicknameFull"
	UserService_GetKycConfirmByID_FullMethodName                  = "/user_service.UserService/GetKycConfirmByID"
	UserService_GetShortUserByAccess_FullMethodName               = "/user_service.UserService/GetShortUserByAccess"
	UserService_GetShortUserByNickname_FullMethodName             = "/user_service.UserService/GetShortUserByNickname"
	UserService_GetShortUserByID_FullMethodName                   = "/user_service.UserService/GetShortUserByID"
	UserService_GetUserByNicknameWithTGAndReferral_FullMethodName = "/user_service.UserService/GetUserByNicknameWithTGAndReferral"
	UserService_GetUserByNickname_FullMethodName                  = "/user_service.UserService/GetUserByNickname"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	AddNotice(ctx context.Context, in *AddNoticeRequest, opts ...grpc.CallOption) (*AddNoticeResponse, error)
	VerifyTOTPByUserID(ctx context.Context, in *VerifyTOTPByUserIDRequest, opts ...grpc.CallOption) (*VerifyTOTPByUserIDResponse, error)
	GetUserNicknameByID(ctx context.Context, in *GetUserNicknameByIDRequest, opts ...grpc.CallOption) (*GetUserNicknameByIDResponse, error)
	GetUserByID(ctx context.Context, in *GetUserByIDRequest, opts ...grpc.CallOption) (*GetUserByIDResponse, error)
	GetUserIDByAccessToken(ctx context.Context, in *GetUserIDByAccessTokenRequest, opts ...grpc.CallOption) (*GetUserIDByAccessTokenResponse, error)
	GetUserByAccessToken(ctx context.Context, in *GetUserByAccessTokenRequest, opts ...grpc.CallOption) (*GetUserByAccessTokenResponse, error)
	GetUserByNicknameWithID(ctx context.Context, in *GetUserByNicknameWithIDRequest, opts ...grpc.CallOption) (*GetUserByNicknameWithIDResponse, error)
	GetUserByNicknameFull(ctx context.Context, in *GetUserByNicknameFullRequest, opts ...grpc.CallOption) (*GetUserByNicknameFullResponse, error)
	GetKycConfirmByID(ctx context.Context, in *GetKycConfirmByIDRequest, opts ...grpc.CallOption) (*GetKycConfirmByIDResponse, error)
	GetShortUserByAccess(ctx context.Context, in *GetShortUserByAccessRequest, opts ...grpc.CallOption) (*GetShortUserByAccessResponse, error)
	GetShortUserByNickname(ctx context.Context, in *GetShortUserByNicknameRequest, opts ...grpc.CallOption) (*GetShortUserByNicknameResponse, error)
	GetShortUserByID(ctx context.Context, in *GetShortUserByIDRequest, opts ...grpc.CallOption) (*GetShortUserByIDResponse, error)
	GetUserByNicknameWithTGAndReferral(ctx context.Context, in *GetUserByNicknameWithTGAndReferralRequest, opts ...grpc.CallOption) (*GetUserByNicknameWithTGAndReferralResponse, error)
	GetUserByNickname(ctx context.Context, in *GetUserByNicknameRequest, opts ...grpc.CallOption) (*GetUserByNicknameResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) AddNotice(ctx context.Context, in *AddNoticeRequest, opts ...grpc.CallOption) (*AddNoticeResponse, error) {
	out := new(AddNoticeResponse)
	err := c.cc.Invoke(ctx, UserService_AddNotice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) VerifyTOTPByUserID(ctx context.Context, in *VerifyTOTPByUserIDRequest, opts ...grpc.CallOption) (*VerifyTOTPByUserIDResponse, error) {
	out := new(VerifyTOTPByUserIDResponse)
	err := c.cc.Invoke(ctx, UserService_VerifyTOTPByUserID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserNicknameByID(ctx context.Context, in *GetUserNicknameByIDRequest, opts ...grpc.CallOption) (*GetUserNicknameByIDResponse, error) {
	out := new(GetUserNicknameByIDResponse)
	err := c.cc.Invoke(ctx, UserService_GetUserNicknameByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserByID(ctx context.Context, in *GetUserByIDRequest, opts ...grpc.CallOption) (*GetUserByIDResponse, error) {
	out := new(GetUserByIDResponse)
	err := c.cc.Invoke(ctx, UserService_GetUserByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserIDByAccessToken(ctx context.Context, in *GetUserIDByAccessTokenRequest, opts ...grpc.CallOption) (*GetUserIDByAccessTokenResponse, error) {
	out := new(GetUserIDByAccessTokenResponse)
	err := c.cc.Invoke(ctx, UserService_GetUserIDByAccessToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserByAccessToken(ctx context.Context, in *GetUserByAccessTokenRequest, opts ...grpc.CallOption) (*GetUserByAccessTokenResponse, error) {
	out := new(GetUserByAccessTokenResponse)
	err := c.cc.Invoke(ctx, UserService_GetUserByAccessToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserByNicknameWithID(ctx context.Context, in *GetUserByNicknameWithIDRequest, opts ...grpc.CallOption) (*GetUserByNicknameWithIDResponse, error) {
	out := new(GetUserByNicknameWithIDResponse)
	err := c.cc.Invoke(ctx, UserService_GetUserByNicknameWithID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserByNicknameFull(ctx context.Context, in *GetUserByNicknameFullRequest, opts ...grpc.CallOption) (*GetUserByNicknameFullResponse, error) {
	out := new(GetUserByNicknameFullResponse)
	err := c.cc.Invoke(ctx, UserService_GetUserByNicknameFull_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetKycConfirmByID(ctx context.Context, in *GetKycConfirmByIDRequest, opts ...grpc.CallOption) (*GetKycConfirmByIDResponse, error) {
	out := new(GetKycConfirmByIDResponse)
	err := c.cc.Invoke(ctx, UserService_GetKycConfirmByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetShortUserByAccess(ctx context.Context, in *GetShortUserByAccessRequest, opts ...grpc.CallOption) (*GetShortUserByAccessResponse, error) {
	out := new(GetShortUserByAccessResponse)
	err := c.cc.Invoke(ctx, UserService_GetShortUserByAccess_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetShortUserByNickname(ctx context.Context, in *GetShortUserByNicknameRequest, opts ...grpc.CallOption) (*GetShortUserByNicknameResponse, error) {
	out := new(GetShortUserByNicknameResponse)
	err := c.cc.Invoke(ctx, UserService_GetShortUserByNickname_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetShortUserByID(ctx context.Context, in *GetShortUserByIDRequest, opts ...grpc.CallOption) (*GetShortUserByIDResponse, error) {
	out := new(GetShortUserByIDResponse)
	err := c.cc.Invoke(ctx, UserService_GetShortUserByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserByNicknameWithTGAndReferral(ctx context.Context, in *GetUserByNicknameWithTGAndReferralRequest, opts ...grpc.CallOption) (*GetUserByNicknameWithTGAndReferralResponse, error) {
	out := new(GetUserByNicknameWithTGAndReferralResponse)
	err := c.cc.Invoke(ctx, UserService_GetUserByNicknameWithTGAndReferral_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserByNickname(ctx context.Context, in *GetUserByNicknameRequest, opts ...grpc.CallOption) (*GetUserByNicknameResponse, error) {
	out := new(GetUserByNicknameResponse)
	err := c.cc.Invoke(ctx, UserService_GetUserByNickname_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	AddNotice(context.Context, *AddNoticeRequest) (*AddNoticeResponse, error)
	VerifyTOTPByUserID(context.Context, *VerifyTOTPByUserIDRequest) (*VerifyTOTPByUserIDResponse, error)
	GetUserNicknameByID(context.Context, *GetUserNicknameByIDRequest) (*GetUserNicknameByIDResponse, error)
	GetUserByID(context.Context, *GetUserByIDRequest) (*GetUserByIDResponse, error)
	GetUserIDByAccessToken(context.Context, *GetUserIDByAccessTokenRequest) (*GetUserIDByAccessTokenResponse, error)
	GetUserByAccessToken(context.Context, *GetUserByAccessTokenRequest) (*GetUserByAccessTokenResponse, error)
	GetUserByNicknameWithID(context.Context, *GetUserByNicknameWithIDRequest) (*GetUserByNicknameWithIDResponse, error)
	GetUserByNicknameFull(context.Context, *GetUserByNicknameFullRequest) (*GetUserByNicknameFullResponse, error)
	GetKycConfirmByID(context.Context, *GetKycConfirmByIDRequest) (*GetKycConfirmByIDResponse, error)
	GetShortUserByAccess(context.Context, *GetShortUserByAccessRequest) (*GetShortUserByAccessResponse, error)
	GetShortUserByNickname(context.Context, *GetShortUserByNicknameRequest) (*GetShortUserByNicknameResponse, error)
	GetShortUserByID(context.Context, *GetShortUserByIDRequest) (*GetShortUserByIDResponse, error)
	GetUserByNicknameWithTGAndReferral(context.Context, *GetUserByNicknameWithTGAndReferralRequest) (*GetUserByNicknameWithTGAndReferralResponse, error)
	GetUserByNickname(context.Context, *GetUserByNicknameRequest) (*GetUserByNicknameResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) AddNotice(context.Context, *AddNoticeRequest) (*AddNoticeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNotice not implemented")
}
func (UnimplementedUserServiceServer) VerifyTOTPByUserID(context.Context, *VerifyTOTPByUserIDRequest) (*VerifyTOTPByUserIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyTOTPByUserID not implemented")
}
func (UnimplementedUserServiceServer) GetUserNicknameByID(context.Context, *GetUserNicknameByIDRequest) (*GetUserNicknameByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserNicknameByID not implemented")
}
func (UnimplementedUserServiceServer) GetUserByID(context.Context, *GetUserByIDRequest) (*GetUserByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByID not implemented")
}
func (UnimplementedUserServiceServer) GetUserIDByAccessToken(context.Context, *GetUserIDByAccessTokenRequest) (*GetUserIDByAccessTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserIDByAccessToken not implemented")
}
func (UnimplementedUserServiceServer) GetUserByAccessToken(context.Context, *GetUserByAccessTokenRequest) (*GetUserByAccessTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByAccessToken not implemented")
}
func (UnimplementedUserServiceServer) GetUserByNicknameWithID(context.Context, *GetUserByNicknameWithIDRequest) (*GetUserByNicknameWithIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByNicknameWithID not implemented")
}
func (UnimplementedUserServiceServer) GetUserByNicknameFull(context.Context, *GetUserByNicknameFullRequest) (*GetUserByNicknameFullResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByNicknameFull not implemented")
}
func (UnimplementedUserServiceServer) GetKycConfirmByID(context.Context, *GetKycConfirmByIDRequest) (*GetKycConfirmByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKycConfirmByID not implemented")
}
func (UnimplementedUserServiceServer) GetShortUserByAccess(context.Context, *GetShortUserByAccessRequest) (*GetShortUserByAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShortUserByAccess not implemented")
}
func (UnimplementedUserServiceServer) GetShortUserByNickname(context.Context, *GetShortUserByNicknameRequest) (*GetShortUserByNicknameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShortUserByNickname not implemented")
}
func (UnimplementedUserServiceServer) GetShortUserByID(context.Context, *GetShortUserByIDRequest) (*GetShortUserByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShortUserByID not implemented")
}
func (UnimplementedUserServiceServer) GetUserByNicknameWithTGAndReferral(context.Context, *GetUserByNicknameWithTGAndReferralRequest) (*GetUserByNicknameWithTGAndReferralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByNicknameWithTGAndReferral not implemented")
}
func (UnimplementedUserServiceServer) GetUserByNickname(context.Context, *GetUserByNicknameRequest) (*GetUserByNicknameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByNickname not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_AddNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNoticeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AddNotice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddNotice(ctx, req.(*AddNoticeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_VerifyTOTPByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyTOTPByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).VerifyTOTPByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_VerifyTOTPByUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).VerifyTOTPByUserID(ctx, req.(*VerifyTOTPByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserNicknameByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserNicknameByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserNicknameByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUserNicknameByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserNicknameByID(ctx, req.(*GetUserNicknameByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUserByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserByID(ctx, req.(*GetUserByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserIDByAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserIDByAccessTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserIDByAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUserIDByAccessToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserIDByAccessToken(ctx, req.(*GetUserIDByAccessTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserByAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByAccessTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserByAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUserByAccessToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserByAccessToken(ctx, req.(*GetUserByAccessTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserByNicknameWithID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByNicknameWithIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserByNicknameWithID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUserByNicknameWithID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserByNicknameWithID(ctx, req.(*GetUserByNicknameWithIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserByNicknameFull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByNicknameFullRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserByNicknameFull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUserByNicknameFull_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserByNicknameFull(ctx, req.(*GetUserByNicknameFullRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetKycConfirmByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKycConfirmByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetKycConfirmByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetKycConfirmByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetKycConfirmByID(ctx, req.(*GetKycConfirmByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetShortUserByAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShortUserByAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetShortUserByAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetShortUserByAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetShortUserByAccess(ctx, req.(*GetShortUserByAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetShortUserByNickname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShortUserByNicknameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetShortUserByNickname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetShortUserByNickname_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetShortUserByNickname(ctx, req.(*GetShortUserByNicknameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetShortUserByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShortUserByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetShortUserByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetShortUserByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetShortUserByID(ctx, req.(*GetShortUserByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserByNicknameWithTGAndReferral_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByNicknameWithTGAndReferralRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserByNicknameWithTGAndReferral(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUserByNicknameWithTGAndReferral_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserByNicknameWithTGAndReferral(ctx, req.(*GetUserByNicknameWithTGAndReferralRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserByNickname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByNicknameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserByNickname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUserByNickname_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserByNickname(ctx, req.(*GetUserByNicknameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user_service.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddNotice",
			Handler:    _UserService_AddNotice_Handler,
		},
		{
			MethodName: "VerifyTOTPByUserID",
			Handler:    _UserService_VerifyTOTPByUserID_Handler,
		},
		{
			MethodName: "GetUserNicknameByID",
			Handler:    _UserService_GetUserNicknameByID_Handler,
		},
		{
			MethodName: "GetUserByID",
			Handler:    _UserService_GetUserByID_Handler,
		},
		{
			MethodName: "GetUserIDByAccessToken",
			Handler:    _UserService_GetUserIDByAccessToken_Handler,
		},
		{
			MethodName: "GetUserByAccessToken",
			Handler:    _UserService_GetUserByAccessToken_Handler,
		},
		{
			MethodName: "GetUserByNicknameWithID",
			Handler:    _UserService_GetUserByNicknameWithID_Handler,
		},
		{
			MethodName: "GetUserByNicknameFull",
			Handler:    _UserService_GetUserByNicknameFull_Handler,
		},
		{
			MethodName: "GetKycConfirmByID",
			Handler:    _UserService_GetKycConfirmByID_Handler,
		},
		{
			MethodName: "GetShortUserByAccess",
			Handler:    _UserService_GetShortUserByAccess_Handler,
		},
		{
			MethodName: "GetShortUserByNickname",
			Handler:    _UserService_GetShortUserByNickname_Handler,
		},
		{
			MethodName: "GetShortUserByID",
			Handler:    _UserService_GetShortUserByID_Handler,
		},
		{
			MethodName: "GetUserByNicknameWithTGAndReferral",
			Handler:    _UserService_GetUserByNicknameWithTGAndReferral_Handler,
		},
		{
			MethodName: "GetUserByNickname",
			Handler:    _UserService_GetUserByNickname_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "users/user.proto",
}
