// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api_m

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OfferClient is the client API for Offer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OfferClient interface {
	CreateOffer(ctx context.Context, in *CreateOfferRequest, opts ...grpc.CallOption) (*OfferData, error)
	DeleteOfferBack(ctx context.Context, in *DeleteOfferBRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteOfferFront(ctx context.Context, in *DeleteOfferFRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetActiveOffers(ctx context.Context, in *GetActiveOffersRequest, opts ...grpc.CallOption) (*GetActiveOffersResponse, error)
	GetOffersUser(ctx context.Context, in *GetOffersUserRequest, opts ...grpc.CallOption) (*GetOffersUserResponse, error)
}

type offerClient struct {
	cc grpc.ClientConnInterface
}

func NewOfferClient(cc grpc.ClientConnInterface) OfferClient {
	return &offerClient{cc}
}

func (c *offerClient) CreateOffer(ctx context.Context, in *CreateOfferRequest, opts ...grpc.CallOption) (*OfferData, error) {
	out := new(OfferData)
	err := c.cc.Invoke(ctx, "/api_m.offer/CreateOffer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offerClient) DeleteOfferBack(ctx context.Context, in *DeleteOfferBRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api_m.offer/DeleteOfferBack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offerClient) DeleteOfferFront(ctx context.Context, in *DeleteOfferFRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api_m.offer/DeleteOfferFront", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offerClient) GetActiveOffers(ctx context.Context, in *GetActiveOffersRequest, opts ...grpc.CallOption) (*GetActiveOffersResponse, error) {
	out := new(GetActiveOffersResponse)
	err := c.cc.Invoke(ctx, "/api_m.offer/GetActiveOffers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offerClient) GetOffersUser(ctx context.Context, in *GetOffersUserRequest, opts ...grpc.CallOption) (*GetOffersUserResponse, error) {
	out := new(GetOffersUserResponse)
	err := c.cc.Invoke(ctx, "/api_m.offer/GetOffersUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OfferServer is the server API for Offer service.
// All implementations must embed UnimplementedOfferServer
// for forward compatibility
type OfferServer interface {
	CreateOffer(context.Context, *CreateOfferRequest) (*OfferData, error)
	DeleteOfferBack(context.Context, *DeleteOfferBRequest) (*emptypb.Empty, error)
	DeleteOfferFront(context.Context, *DeleteOfferFRequest) (*emptypb.Empty, error)
	GetActiveOffers(context.Context, *GetActiveOffersRequest) (*GetActiveOffersResponse, error)
	GetOffersUser(context.Context, *GetOffersUserRequest) (*GetOffersUserResponse, error)
	mustEmbedUnimplementedOfferServer()
}

// UnimplementedOfferServer must be embedded to have forward compatible implementations.
type UnimplementedOfferServer struct {
}

func (UnimplementedOfferServer) CreateOffer(context.Context, *CreateOfferRequest) (*OfferData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOffer not implemented")
}
func (UnimplementedOfferServer) DeleteOfferBack(context.Context, *DeleteOfferBRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOfferBack not implemented")
}
func (UnimplementedOfferServer) DeleteOfferFront(context.Context, *DeleteOfferFRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOfferFront not implemented")
}
func (UnimplementedOfferServer) GetActiveOffers(context.Context, *GetActiveOffersRequest) (*GetActiveOffersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveOffers not implemented")
}
func (UnimplementedOfferServer) GetOffersUser(context.Context, *GetOffersUserRequest) (*GetOffersUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOffersUser not implemented")
}
func (UnimplementedOfferServer) mustEmbedUnimplementedOfferServer() {}

// UnsafeOfferServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OfferServer will
// result in compilation errors.
type UnsafeOfferServer interface {
	mustEmbedUnimplementedOfferServer()
}

func RegisterOfferServer(s grpc.ServiceRegistrar, srv OfferServer) {
	s.RegisterService(&Offer_ServiceDesc, srv)
}

func _Offer_CreateOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOfferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfferServer).CreateOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_m.offer/CreateOffer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfferServer).CreateOffer(ctx, req.(*CreateOfferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Offer_DeleteOfferBack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOfferBRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfferServer).DeleteOfferBack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_m.offer/DeleteOfferBack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfferServer).DeleteOfferBack(ctx, req.(*DeleteOfferBRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Offer_DeleteOfferFront_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOfferFRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfferServer).DeleteOfferFront(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_m.offer/DeleteOfferFront",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfferServer).DeleteOfferFront(ctx, req.(*DeleteOfferFRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Offer_GetActiveOffers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveOffersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfferServer).GetActiveOffers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_m.offer/GetActiveOffers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfferServer).GetActiveOffers(ctx, req.(*GetActiveOffersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Offer_GetOffersUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOffersUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfferServer).GetOffersUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_m.offer/GetOffersUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfferServer).GetOffersUser(ctx, req.(*GetOffersUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Offer_ServiceDesc is the grpc.ServiceDesc for Offer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Offer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api_m.offer",
	HandlerType: (*OfferServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOffer",
			Handler:    _Offer_CreateOffer_Handler,
		},
		{
			MethodName: "DeleteOfferBack",
			Handler:    _Offer_DeleteOfferBack_Handler,
		},
		{
			MethodName: "DeleteOfferFront",
			Handler:    _Offer_DeleteOfferFront_Handler,
		},
		{
			MethodName: "GetActiveOffers",
			Handler:    _Offer_GetActiveOffers_Handler,
		},
		{
			MethodName: "GetOffersUser",
			Handler:    _Offer_GetOffersUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api_m/offer.proto",
}
