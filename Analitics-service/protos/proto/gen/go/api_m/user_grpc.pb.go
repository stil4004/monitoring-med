// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api_m

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	AddComment(ctx context.Context, in *AddCommentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*SignUpResponse, error)
	SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error)
	SignOut(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetUserNicknameByID(ctx context.Context, in *GetUserNicknameByIDRequest, opts ...grpc.CallOption) (*GetUserNicknameByIDResponse, error)
	GetUserByID(ctx context.Context, in *GetUserByIDRequest, opts ...grpc.CallOption) (*GetUserByIDResponse, error)
	GetUserIDByAccessToken(ctx context.Context, in *GetUserIDByAccessTokenRequest, opts ...grpc.CallOption) (*GetUserIDByAccessTokenResponse, error)
	GetUserByAccessToken(ctx context.Context, in *GetUserByAccessTokenRequest, opts ...grpc.CallOption) (*GetUserByAccessTokenResponse, error)
	GetUserByNicknameWithID(ctx context.Context, in *GetUserByNicknameWithIDRequest, opts ...grpc.CallOption) (*GetUserByNicknameWithIDResponse, error)
	GetUserByNicknameFull(ctx context.Context, in *GetUserByNicknameFullRequest, opts ...grpc.CallOption) (*GetUserByNicknameFullResponse, error)
	GetShortUserByAccess(ctx context.Context, in *GetShortUserByAccessRequest, opts ...grpc.CallOption) (*GetShortUserByAccessResponse, error)
	GetShortUserByNickname(ctx context.Context, in *GetShortUserByNicknameRequest, opts ...grpc.CallOption) (*GetShortUserByNicknameResponse, error)
	GetShortUserByID(ctx context.Context, in *GetShortUserByIDRequest, opts ...grpc.CallOption) (*GetShortUserByIDResponse, error)
	GetUserByNicknameWithTGAndReferral(ctx context.Context, in *GetUserByNicknameWithTGAndReferralRequest, opts ...grpc.CallOption) (*GetUserByNicknameWithTGAndReferralResponse, error)
	GetUserByNickname(ctx context.Context, in *GetUserByNicknameRequest, opts ...grpc.CallOption) (*GetUserByNicknameResponse, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) AddComment(ctx context.Context, in *AddCommentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api_m.user/AddComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*SignUpResponse, error) {
	out := new(SignUpResponse)
	err := c.cc.Invoke(ctx, "/api_m.user/SignUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error) {
	out := new(SignInResponse)
	err := c.cc.Invoke(ctx, "/api_m.user/SignIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SignOut(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api_m.user/SignOut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserNicknameByID(ctx context.Context, in *GetUserNicknameByIDRequest, opts ...grpc.CallOption) (*GetUserNicknameByIDResponse, error) {
	out := new(GetUserNicknameByIDResponse)
	err := c.cc.Invoke(ctx, "/api_m.user/GetUserNicknameByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserByID(ctx context.Context, in *GetUserByIDRequest, opts ...grpc.CallOption) (*GetUserByIDResponse, error) {
	out := new(GetUserByIDResponse)
	err := c.cc.Invoke(ctx, "/api_m.user/GetUserByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserIDByAccessToken(ctx context.Context, in *GetUserIDByAccessTokenRequest, opts ...grpc.CallOption) (*GetUserIDByAccessTokenResponse, error) {
	out := new(GetUserIDByAccessTokenResponse)
	err := c.cc.Invoke(ctx, "/api_m.user/GetUserIDByAccessToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserByAccessToken(ctx context.Context, in *GetUserByAccessTokenRequest, opts ...grpc.CallOption) (*GetUserByAccessTokenResponse, error) {
	out := new(GetUserByAccessTokenResponse)
	err := c.cc.Invoke(ctx, "/api_m.user/GetUserByAccessToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserByNicknameWithID(ctx context.Context, in *GetUserByNicknameWithIDRequest, opts ...grpc.CallOption) (*GetUserByNicknameWithIDResponse, error) {
	out := new(GetUserByNicknameWithIDResponse)
	err := c.cc.Invoke(ctx, "/api_m.user/GetUserByNicknameWithID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserByNicknameFull(ctx context.Context, in *GetUserByNicknameFullRequest, opts ...grpc.CallOption) (*GetUserByNicknameFullResponse, error) {
	out := new(GetUserByNicknameFullResponse)
	err := c.cc.Invoke(ctx, "/api_m.user/GetUserByNicknameFull", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetShortUserByAccess(ctx context.Context, in *GetShortUserByAccessRequest, opts ...grpc.CallOption) (*GetShortUserByAccessResponse, error) {
	out := new(GetShortUserByAccessResponse)
	err := c.cc.Invoke(ctx, "/api_m.user/GetShortUserByAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetShortUserByNickname(ctx context.Context, in *GetShortUserByNicknameRequest, opts ...grpc.CallOption) (*GetShortUserByNicknameResponse, error) {
	out := new(GetShortUserByNicknameResponse)
	err := c.cc.Invoke(ctx, "/api_m.user/GetShortUserByNickname", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetShortUserByID(ctx context.Context, in *GetShortUserByIDRequest, opts ...grpc.CallOption) (*GetShortUserByIDResponse, error) {
	out := new(GetShortUserByIDResponse)
	err := c.cc.Invoke(ctx, "/api_m.user/GetShortUserByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserByNicknameWithTGAndReferral(ctx context.Context, in *GetUserByNicknameWithTGAndReferralRequest, opts ...grpc.CallOption) (*GetUserByNicknameWithTGAndReferralResponse, error) {
	out := new(GetUserByNicknameWithTGAndReferralResponse)
	err := c.cc.Invoke(ctx, "/api_m.user/GetUserByNicknameWithTGAndReferral", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserByNickname(ctx context.Context, in *GetUserByNicknameRequest, opts ...grpc.CallOption) (*GetUserByNicknameResponse, error) {
	out := new(GetUserByNicknameResponse)
	err := c.cc.Invoke(ctx, "/api_m.user/GetUserByNickname", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility
type UserServer interface {
	AddComment(context.Context, *AddCommentRequest) (*emptypb.Empty, error)
	SignUp(context.Context, *SignUpRequest) (*SignUpResponse, error)
	SignIn(context.Context, *SignInRequest) (*SignInResponse, error)
	SignOut(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	GetUserNicknameByID(context.Context, *GetUserNicknameByIDRequest) (*GetUserNicknameByIDResponse, error)
	GetUserByID(context.Context, *GetUserByIDRequest) (*GetUserByIDResponse, error)
	GetUserIDByAccessToken(context.Context, *GetUserIDByAccessTokenRequest) (*GetUserIDByAccessTokenResponse, error)
	GetUserByAccessToken(context.Context, *GetUserByAccessTokenRequest) (*GetUserByAccessTokenResponse, error)
	GetUserByNicknameWithID(context.Context, *GetUserByNicknameWithIDRequest) (*GetUserByNicknameWithIDResponse, error)
	GetUserByNicknameFull(context.Context, *GetUserByNicknameFullRequest) (*GetUserByNicknameFullResponse, error)
	GetShortUserByAccess(context.Context, *GetShortUserByAccessRequest) (*GetShortUserByAccessResponse, error)
	GetShortUserByNickname(context.Context, *GetShortUserByNicknameRequest) (*GetShortUserByNicknameResponse, error)
	GetShortUserByID(context.Context, *GetShortUserByIDRequest) (*GetShortUserByIDResponse, error)
	GetUserByNicknameWithTGAndReferral(context.Context, *GetUserByNicknameWithTGAndReferralRequest) (*GetUserByNicknameWithTGAndReferralResponse, error)
	GetUserByNickname(context.Context, *GetUserByNicknameRequest) (*GetUserByNicknameResponse, error)
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (UnimplementedUserServer) AddComment(context.Context, *AddCommentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddComment not implemented")
}
func (UnimplementedUserServer) SignUp(context.Context, *SignUpRequest) (*SignUpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUp not implemented")
}
func (UnimplementedUserServer) SignIn(context.Context, *SignInRequest) (*SignInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignIn not implemented")
}
func (UnimplementedUserServer) SignOut(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignOut not implemented")
}
func (UnimplementedUserServer) GetUserNicknameByID(context.Context, *GetUserNicknameByIDRequest) (*GetUserNicknameByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserNicknameByID not implemented")
}
func (UnimplementedUserServer) GetUserByID(context.Context, *GetUserByIDRequest) (*GetUserByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByID not implemented")
}
func (UnimplementedUserServer) GetUserIDByAccessToken(context.Context, *GetUserIDByAccessTokenRequest) (*GetUserIDByAccessTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserIDByAccessToken not implemented")
}
func (UnimplementedUserServer) GetUserByAccessToken(context.Context, *GetUserByAccessTokenRequest) (*GetUserByAccessTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByAccessToken not implemented")
}
func (UnimplementedUserServer) GetUserByNicknameWithID(context.Context, *GetUserByNicknameWithIDRequest) (*GetUserByNicknameWithIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByNicknameWithID not implemented")
}
func (UnimplementedUserServer) GetUserByNicknameFull(context.Context, *GetUserByNicknameFullRequest) (*GetUserByNicknameFullResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByNicknameFull not implemented")
}
func (UnimplementedUserServer) GetShortUserByAccess(context.Context, *GetShortUserByAccessRequest) (*GetShortUserByAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShortUserByAccess not implemented")
}
func (UnimplementedUserServer) GetShortUserByNickname(context.Context, *GetShortUserByNicknameRequest) (*GetShortUserByNicknameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShortUserByNickname not implemented")
}
func (UnimplementedUserServer) GetShortUserByID(context.Context, *GetShortUserByIDRequest) (*GetShortUserByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShortUserByID not implemented")
}
func (UnimplementedUserServer) GetUserByNicknameWithTGAndReferral(context.Context, *GetUserByNicknameWithTGAndReferralRequest) (*GetUserByNicknameWithTGAndReferralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByNicknameWithTGAndReferral not implemented")
}
func (UnimplementedUserServer) GetUserByNickname(context.Context, *GetUserByNicknameRequest) (*GetUserByNicknameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByNickname not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_AddComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AddComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_m.user/AddComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AddComment(ctx, req.(*AddCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_m.user/SignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SignUp(ctx, req.(*SignUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_m.user/SignIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SignIn(ctx, req.(*SignInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SignOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SignOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_m.user/SignOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SignOut(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserNicknameByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserNicknameByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserNicknameByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_m.user/GetUserNicknameByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserNicknameByID(ctx, req.(*GetUserNicknameByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_m.user/GetUserByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserByID(ctx, req.(*GetUserByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserIDByAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserIDByAccessTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserIDByAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_m.user/GetUserIDByAccessToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserIDByAccessToken(ctx, req.(*GetUserIDByAccessTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserByAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByAccessTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserByAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_m.user/GetUserByAccessToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserByAccessToken(ctx, req.(*GetUserByAccessTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserByNicknameWithID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByNicknameWithIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserByNicknameWithID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_m.user/GetUserByNicknameWithID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserByNicknameWithID(ctx, req.(*GetUserByNicknameWithIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserByNicknameFull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByNicknameFullRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserByNicknameFull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_m.user/GetUserByNicknameFull",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserByNicknameFull(ctx, req.(*GetUserByNicknameFullRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetShortUserByAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShortUserByAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetShortUserByAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_m.user/GetShortUserByAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetShortUserByAccess(ctx, req.(*GetShortUserByAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetShortUserByNickname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShortUserByNicknameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetShortUserByNickname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_m.user/GetShortUserByNickname",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetShortUserByNickname(ctx, req.(*GetShortUserByNicknameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetShortUserByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShortUserByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetShortUserByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_m.user/GetShortUserByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetShortUserByID(ctx, req.(*GetShortUserByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserByNicknameWithTGAndReferral_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByNicknameWithTGAndReferralRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserByNicknameWithTGAndReferral(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_m.user/GetUserByNicknameWithTGAndReferral",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserByNicknameWithTGAndReferral(ctx, req.(*GetUserByNicknameWithTGAndReferralRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserByNickname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByNicknameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserByNickname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_m.user/GetUserByNickname",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserByNickname(ctx, req.(*GetUserByNicknameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api_m.user",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddComment",
			Handler:    _User_AddComment_Handler,
		},
		{
			MethodName: "SignUp",
			Handler:    _User_SignUp_Handler,
		},
		{
			MethodName: "SignIn",
			Handler:    _User_SignIn_Handler,
		},
		{
			MethodName: "SignOut",
			Handler:    _User_SignOut_Handler,
		},
		{
			MethodName: "GetUserNicknameByID",
			Handler:    _User_GetUserNicknameByID_Handler,
		},
		{
			MethodName: "GetUserByID",
			Handler:    _User_GetUserByID_Handler,
		},
		{
			MethodName: "GetUserIDByAccessToken",
			Handler:    _User_GetUserIDByAccessToken_Handler,
		},
		{
			MethodName: "GetUserByAccessToken",
			Handler:    _User_GetUserByAccessToken_Handler,
		},
		{
			MethodName: "GetUserByNicknameWithID",
			Handler:    _User_GetUserByNicknameWithID_Handler,
		},
		{
			MethodName: "GetUserByNicknameFull",
			Handler:    _User_GetUserByNicknameFull_Handler,
		},
		{
			MethodName: "GetShortUserByAccess",
			Handler:    _User_GetShortUserByAccess_Handler,
		},
		{
			MethodName: "GetShortUserByNickname",
			Handler:    _User_GetShortUserByNickname_Handler,
		},
		{
			MethodName: "GetShortUserByID",
			Handler:    _User_GetShortUserByID_Handler,
		},
		{
			MethodName: "GetUserByNicknameWithTGAndReferral",
			Handler:    _User_GetUserByNicknameWithTGAndReferral_Handler,
		},
		{
			MethodName: "GetUserByNickname",
			Handler:    _User_GetUserByNickname_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api_m/user.proto",
}
