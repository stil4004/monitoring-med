// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api_m

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PaymentClient is the client API for Payment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaymentClient interface {
	CreateNewRequisite(ctx context.Context, in *CreateRequisiteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteRequisite(ctx context.Context, in *DeleteRequisiteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetRequisites(ctx context.Context, in *GetRequisitesRequest, opts ...grpc.CallOption) (*GetRequisitesResponse, error)
	GetOfferPayments(ctx context.Context, in *OfferPaymentsRequest, opts ...grpc.CallOption) (*OfferPaymentsResponse, error)
}

type paymentClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentClient(cc grpc.ClientConnInterface) PaymentClient {
	return &paymentClient{cc}
}

func (c *paymentClient) CreateNewRequisite(ctx context.Context, in *CreateRequisiteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api_m.payment/CreateNewRequisite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentClient) DeleteRequisite(ctx context.Context, in *DeleteRequisiteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api_m.payment/DeleteRequisite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentClient) GetRequisites(ctx context.Context, in *GetRequisitesRequest, opts ...grpc.CallOption) (*GetRequisitesResponse, error) {
	out := new(GetRequisitesResponse)
	err := c.cc.Invoke(ctx, "/api_m.payment/GetRequisites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentClient) GetOfferPayments(ctx context.Context, in *OfferPaymentsRequest, opts ...grpc.CallOption) (*OfferPaymentsResponse, error) {
	out := new(OfferPaymentsResponse)
	err := c.cc.Invoke(ctx, "/api_m.payment/GetOfferPayments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentServer is the server API for Payment service.
// All implementations must embed UnimplementedPaymentServer
// for forward compatibility
type PaymentServer interface {
	CreateNewRequisite(context.Context, *CreateRequisiteRequest) (*emptypb.Empty, error)
	DeleteRequisite(context.Context, *DeleteRequisiteRequest) (*emptypb.Empty, error)
	GetRequisites(context.Context, *GetRequisitesRequest) (*GetRequisitesResponse, error)
	GetOfferPayments(context.Context, *OfferPaymentsRequest) (*OfferPaymentsResponse, error)
	mustEmbedUnimplementedPaymentServer()
}

// UnimplementedPaymentServer must be embedded to have forward compatible implementations.
type UnimplementedPaymentServer struct {
}

func (UnimplementedPaymentServer) CreateNewRequisite(context.Context, *CreateRequisiteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewRequisite not implemented")
}
func (UnimplementedPaymentServer) DeleteRequisite(context.Context, *DeleteRequisiteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRequisite not implemented")
}
func (UnimplementedPaymentServer) GetRequisites(context.Context, *GetRequisitesRequest) (*GetRequisitesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRequisites not implemented")
}
func (UnimplementedPaymentServer) GetOfferPayments(context.Context, *OfferPaymentsRequest) (*OfferPaymentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOfferPayments not implemented")
}
func (UnimplementedPaymentServer) mustEmbedUnimplementedPaymentServer() {}

// UnsafePaymentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentServer will
// result in compilation errors.
type UnsafePaymentServer interface {
	mustEmbedUnimplementedPaymentServer()
}

func RegisterPaymentServer(s grpc.ServiceRegistrar, srv PaymentServer) {
	s.RegisterService(&Payment_ServiceDesc, srv)
}

func _Payment_CreateNewRequisite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequisiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServer).CreateNewRequisite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_m.payment/CreateNewRequisite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServer).CreateNewRequisite(ctx, req.(*CreateRequisiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payment_DeleteRequisite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequisiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServer).DeleteRequisite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_m.payment/DeleteRequisite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServer).DeleteRequisite(ctx, req.(*DeleteRequisiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payment_GetRequisites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequisitesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServer).GetRequisites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_m.payment/GetRequisites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServer).GetRequisites(ctx, req.(*GetRequisitesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payment_GetOfferPayments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OfferPaymentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServer).GetOfferPayments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_m.payment/GetOfferPayments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServer).GetOfferPayments(ctx, req.(*OfferPaymentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Payment_ServiceDesc is the grpc.ServiceDesc for Payment service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Payment_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api_m.payment",
	HandlerType: (*PaymentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNewRequisite",
			Handler:    _Payment_CreateNewRequisite_Handler,
		},
		{
			MethodName: "DeleteRequisite",
			Handler:    _Payment_DeleteRequisite_Handler,
		},
		{
			MethodName: "GetRequisites",
			Handler:    _Payment_GetRequisites_Handler,
		},
		{
			MethodName: "GetOfferPayments",
			Handler:    _Payment_GetOfferPayments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api_m/payment.proto",
}
