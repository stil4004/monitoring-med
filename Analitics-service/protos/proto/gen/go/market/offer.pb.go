// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.3
// source: market/offer.proto

package market

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetOffersUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Limit  int64  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Page   int64  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	Access string `protobuf:"bytes,4,opt,name=access,proto3" json:"access,omitempty"`
}

func (x *GetOffersUserRequest) Reset() {
	*x = GetOffersUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_offer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOffersUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOffersUserRequest) ProtoMessage() {}

func (x *GetOffersUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_market_offer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOffersUserRequest.ProtoReflect.Descriptor instead.
func (*GetOffersUserRequest) Descriptor() ([]byte, []int) {
	return file_market_offer_proto_rawDescGZIP(), []int{0}
}

func (x *GetOffersUserRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GetOffersUserRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetOffersUserRequest) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetOffersUserRequest) GetAccess() string {
	if x != nil {
		return x.Access
	}
	return ""
}

type GetOffersUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  []*OfferData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Total int64        `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	Pages int64        `protobuf:"varint,3,opt,name=pages,proto3" json:"pages,omitempty"`
}

func (x *GetOffersUserResponse) Reset() {
	*x = GetOffersUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_offer_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOffersUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOffersUserResponse) ProtoMessage() {}

func (x *GetOffersUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_market_offer_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOffersUserResponse.ProtoReflect.Descriptor instead.
func (*GetOffersUserResponse) Descriptor() ([]byte, []int) {
	return file_market_offer_proto_rawDescGZIP(), []int{1}
}

func (x *GetOffersUserResponse) GetData() []*OfferData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetOffersUserResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetOffersUserResponse) GetPages() int64 {
	if x != nil {
		return x.Pages
	}
	return 0
}

type DeleteOfferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InternalId string `protobuf:"bytes,1,opt,name=internalId,proto3" json:"internalId,omitempty"`
	ClientId   int64  `protobuf:"varint,2,opt,name=clientId,proto3" json:"clientId,omitempty"`
}

func (x *DeleteOfferRequest) Reset() {
	*x = DeleteOfferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_offer_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOfferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOfferRequest) ProtoMessage() {}

func (x *DeleteOfferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_market_offer_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOfferRequest.ProtoReflect.Descriptor instead.
func (*DeleteOfferRequest) Descriptor() ([]byte, []int) {
	return file_market_offer_proto_rawDescGZIP(), []int{2}
}

func (x *DeleteOfferRequest) GetInternalId() string {
	if x != nil {
		return x.InternalId
	}
	return ""
}

func (x *DeleteOfferRequest) GetClientId() int64 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

type GetActiveOffersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Fiat       []string `protobuf:"bytes,2,rep,name=fiat,proto3" json:"fiat,omitempty"`
	Crypto     string   `protobuf:"bytes,3,opt,name=crypto,proto3" json:"crypto,omitempty"`
	Amount     float64  `protobuf:"fixed64,4,opt,name=amount,proto3" json:"amount,omitempty"`
	BestRating bool     `protobuf:"varint,5,opt,name=bestRating,proto3" json:"bestRating,omitempty"`
	BestPrice  bool     `protobuf:"varint,6,opt,name=bestPrice,proto3" json:"bestPrice,omitempty"`
	Limit      int64    `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty"`
	Page       int64    `protobuf:"varint,8,opt,name=page,proto3" json:"page,omitempty"`
	Sort       string   `protobuf:"bytes,9,opt,name=sort,proto3" json:"sort,omitempty"`
}

func (x *GetActiveOffersRequest) Reset() {
	*x = GetActiveOffersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_offer_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActiveOffersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActiveOffersRequest) ProtoMessage() {}

func (x *GetActiveOffersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_market_offer_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActiveOffersRequest.ProtoReflect.Descriptor instead.
func (*GetActiveOffersRequest) Descriptor() ([]byte, []int) {
	return file_market_offer_proto_rawDescGZIP(), []int{3}
}

func (x *GetActiveOffersRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GetActiveOffersRequest) GetFiat() []string {
	if x != nil {
		return x.Fiat
	}
	return nil
}

func (x *GetActiveOffersRequest) GetCrypto() string {
	if x != nil {
		return x.Crypto
	}
	return ""
}

func (x *GetActiveOffersRequest) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *GetActiveOffersRequest) GetBestRating() bool {
	if x != nil {
		return x.BestRating
	}
	return false
}

func (x *GetActiveOffersRequest) GetBestPrice() bool {
	if x != nil {
		return x.BestPrice
	}
	return false
}

func (x *GetActiveOffersRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetActiveOffersRequest) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetActiveOffersRequest) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

type GetActiveOffersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  []*OfferData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Total int64        `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	Pages int64        `protobuf:"varint,3,opt,name=pages,proto3" json:"pages,omitempty"`
}

func (x *GetActiveOffersResponse) Reset() {
	*x = GetActiveOffersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_offer_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActiveOffersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActiveOffersResponse) ProtoMessage() {}

func (x *GetActiveOffersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_market_offer_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActiveOffersResponse.ProtoReflect.Descriptor instead.
func (*GetActiveOffersResponse) Descriptor() ([]byte, []int) {
	return file_market_offer_proto_rawDescGZIP(), []int{4}
}

func (x *GetActiveOffersResponse) GetData() []*OfferData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetActiveOffersResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetActiveOffersResponse) GetPages() int64 {
	if x != nil {
		return x.Pages
	}
	return 0
}

type CreateOfferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                      string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	ExchangePercent           float64                `protobuf:"fixed64,2,opt,name=exchangePercent,proto3" json:"exchangePercent,omitempty"`
	LiquidityCrypto           float64                `protobuf:"fixed64,3,opt,name=liquidityCrypto,proto3" json:"liquidityCrypto,omitempty"`
	LiquidityFiat             float64                `protobuf:"fixed64,4,opt,name=liquidityFiat,proto3" json:"liquidityFiat,omitempty"`
	Fixed                     bool                   `protobuf:"varint,5,opt,name=fixed,proto3" json:"fixed,omitempty"`
	Payments                  []*CreateOfferPayment  `protobuf:"bytes,6,rep,name=payments,proto3" json:"payments,omitempty"`
	ExchangeRate              float64                `protobuf:"fixed64,7,opt,name=exchangeRate,proto3" json:"exchangeRate,omitempty"`
	LimitMin                  float64                `protobuf:"fixed64,8,opt,name=limitMin,proto3" json:"limitMin,omitempty"`
	LimitMax                  float64                `protobuf:"fixed64,9,opt,name=limitMax,proto3" json:"limitMax,omitempty"`
	Fiat                      string                 `protobuf:"bytes,10,opt,name=fiat,proto3" json:"fiat,omitempty"`
	Crypto                    string                 `protobuf:"bytes,11,opt,name=crypto,proto3" json:"crypto,omitempty"`
	TransactionWithdrawAmount float64                `protobuf:"fixed64,12,opt,name=transactionWithdrawAmount,proto3" json:"transactionWithdrawAmount,omitempty"` // <>
	CountryCode               string                 `protobuf:"bytes,13,opt,name=countryCode,proto3" json:"countryCode,omitempty"`
	Term                      string                 `protobuf:"bytes,14,opt,name=term,proto3" json:"term,omitempty"`
	ExpireOfferTime           *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=ExpireOfferTime,proto3" json:"ExpireOfferTime,omitempty"`
	ExpireOrderCreationTime   *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=ExpireOrderCreationTime,proto3" json:"ExpireOrderCreationTime,omitempty"`
	ExternalId                string                 `protobuf:"bytes,17,opt,name=ExternalId,proto3" json:"ExternalId,omitempty"`
	// int64 userid = 18;
	Access string `protobuf:"bytes,18,opt,name=access,proto3" json:"access,omitempty"`
}

func (x *CreateOfferRequest) Reset() {
	*x = CreateOfferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_offer_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOfferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOfferRequest) ProtoMessage() {}

func (x *CreateOfferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_market_offer_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOfferRequest.ProtoReflect.Descriptor instead.
func (*CreateOfferRequest) Descriptor() ([]byte, []int) {
	return file_market_offer_proto_rawDescGZIP(), []int{5}
}

func (x *CreateOfferRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CreateOfferRequest) GetExchangePercent() float64 {
	if x != nil {
		return x.ExchangePercent
	}
	return 0
}

func (x *CreateOfferRequest) GetLiquidityCrypto() float64 {
	if x != nil {
		return x.LiquidityCrypto
	}
	return 0
}

func (x *CreateOfferRequest) GetLiquidityFiat() float64 {
	if x != nil {
		return x.LiquidityFiat
	}
	return 0
}

func (x *CreateOfferRequest) GetFixed() bool {
	if x != nil {
		return x.Fixed
	}
	return false
}

func (x *CreateOfferRequest) GetPayments() []*CreateOfferPayment {
	if x != nil {
		return x.Payments
	}
	return nil
}

func (x *CreateOfferRequest) GetExchangeRate() float64 {
	if x != nil {
		return x.ExchangeRate
	}
	return 0
}

func (x *CreateOfferRequest) GetLimitMin() float64 {
	if x != nil {
		return x.LimitMin
	}
	return 0
}

func (x *CreateOfferRequest) GetLimitMax() float64 {
	if x != nil {
		return x.LimitMax
	}
	return 0
}

func (x *CreateOfferRequest) GetFiat() string {
	if x != nil {
		return x.Fiat
	}
	return ""
}

func (x *CreateOfferRequest) GetCrypto() string {
	if x != nil {
		return x.Crypto
	}
	return ""
}

func (x *CreateOfferRequest) GetTransactionWithdrawAmount() float64 {
	if x != nil {
		return x.TransactionWithdrawAmount
	}
	return 0
}

func (x *CreateOfferRequest) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *CreateOfferRequest) GetTerm() string {
	if x != nil {
		return x.Term
	}
	return ""
}

func (x *CreateOfferRequest) GetExpireOfferTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireOfferTime
	}
	return nil
}

func (x *CreateOfferRequest) GetExpireOrderCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireOrderCreationTime
	}
	return nil
}

func (x *CreateOfferRequest) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *CreateOfferRequest) GetAccess() string {
	if x != nil {
		return x.Access
	}
	return ""
}

type CreateOfferPayment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenFrom string `protobuf:"bytes,1,opt,name=tokenFrom,proto3" json:"tokenFrom,omitempty"`
	TokenTo   string `protobuf:"bytes,2,opt,name=tokenTo,proto3" json:"tokenTo,omitempty"`
	Extra     string `protobuf:"bytes,3,opt,name=extra,proto3" json:"extra,omitempty"`
	Address   string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *CreateOfferPayment) Reset() {
	*x = CreateOfferPayment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_offer_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOfferPayment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOfferPayment) ProtoMessage() {}

func (x *CreateOfferPayment) ProtoReflect() protoreflect.Message {
	mi := &file_market_offer_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOfferPayment.ProtoReflect.Descriptor instead.
func (*CreateOfferPayment) Descriptor() ([]byte, []int) {
	return file_market_offer_proto_rawDescGZIP(), []int{6}
}

func (x *CreateOfferPayment) GetTokenFrom() string {
	if x != nil {
		return x.TokenFrom
	}
	return ""
}

func (x *CreateOfferPayment) GetTokenTo() string {
	if x != nil {
		return x.TokenTo
	}
	return ""
}

func (x *CreateOfferPayment) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

func (x *CreateOfferPayment) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type OfferData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OfferInfo         *OfferInfo `protobuf:"bytes,1,opt,name=offerInfo,proto3" json:"offerInfo,omitempty"`
	User              *UserOffer `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	OfferIsNotCreated bool       `protobuf:"varint,3,opt,name=offerIsNotCreated,proto3" json:"offerIsNotCreated,omitempty"`
}

func (x *OfferData) Reset() {
	*x = OfferData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_offer_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfferData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfferData) ProtoMessage() {}

func (x *OfferData) ProtoReflect() protoreflect.Message {
	mi := &file_market_offer_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfferData.ProtoReflect.Descriptor instead.
func (*OfferData) Descriptor() ([]byte, []int) {
	return file_market_offer_proto_rawDescGZIP(), []int{7}
}

func (x *OfferData) GetOfferInfo() *OfferInfo {
	if x != nil {
		return x.OfferInfo
	}
	return nil
}

func (x *OfferData) GetUser() *UserOffer {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *OfferData) GetOfferIsNotCreated() bool {
	if x != nil {
		return x.OfferIsNotCreated
	}
	return false
}

type OfferInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payments    []*RequisiteOffer `protobuf:"bytes,1,rep,name=payments,proto3" json:"payments,omitempty"`
	CountryCode string            `protobuf:"bytes,2,opt,name=countryCode,proto3" json:"countryCode,omitempty"`
	Description string            `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	InternalId  string            `protobuf:"bytes,4,opt,name=internalId,proto3" json:"internalId,omitempty"`
	// string dExternalId = 5; // <>
	LiquidityFiat   float64 `protobuf:"fixed64,5,opt,name=liquidityFiat,proto3" json:"liquidityFiat,omitempty"`
	LiquidityCrypto float64 `protobuf:"fixed64,6,opt,name=liquidityCrypto,proto3" json:"liquidityCrypto,omitempty"`
	LimitMin        float64 `protobuf:"fixed64,7,opt,name=limitMin,proto3" json:"limitMin,omitempty"`
	LimitMax        float64 `protobuf:"fixed64,8,opt,name=limitMax,proto3" json:"limitMax,omitempty"`
	ExchangeRate    float64 `protobuf:"fixed64,9,opt,name=exchangeRate,proto3" json:"exchangeRate,omitempty"`
	Therms          string  `protobuf:"bytes,10,opt,name=therms,proto3" json:"therms,omitempty"`
	Status          string  `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	// string cryptoToken = 13; // <>
	ExpireOrderCreationTime string `protobuf:"bytes,12,opt,name=expireOrderCreationTime,proto3" json:"expireOrderCreationTime,omitempty"`
	NeedMerchant            bool   `protobuf:"varint,13,opt,name=needMerchant,proto3" json:"needMerchant,omitempty"`
	// string fiatMarket = 16; // <>
	FiatTech string `protobuf:"bytes,14,opt,name=fiatTech,proto3" json:"fiatTech,omitempty"`
	// string cryptoMarket = 18; // <>
	CryptoTech string `protobuf:"bytes,15,opt,name=cryptoTech,proto3" json:"cryptoTech,omitempty"`
	// uint64 id = 20; // <>
	Type string `protobuf:"bytes,16,opt,name=type,proto3" json:"type,omitempty"`
	// double percent = 22; // <>
	// int64 originId = 23; // <>
	IsFixed    bool                   `protobuf:"varint,17,opt,name=isFixed,proto3" json:"isFixed,omitempty"`
	Pro        bool                   `protobuf:"varint,18,opt,name=pro,proto3" json:"pro,omitempty"`
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,19,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *OfferInfo) Reset() {
	*x = OfferInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_offer_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfferInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfferInfo) ProtoMessage() {}

func (x *OfferInfo) ProtoReflect() protoreflect.Message {
	mi := &file_market_offer_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfferInfo.ProtoReflect.Descriptor instead.
func (*OfferInfo) Descriptor() ([]byte, []int) {
	return file_market_offer_proto_rawDescGZIP(), []int{8}
}

func (x *OfferInfo) GetPayments() []*RequisiteOffer {
	if x != nil {
		return x.Payments
	}
	return nil
}

func (x *OfferInfo) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *OfferInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *OfferInfo) GetInternalId() string {
	if x != nil {
		return x.InternalId
	}
	return ""
}

func (x *OfferInfo) GetLiquidityFiat() float64 {
	if x != nil {
		return x.LiquidityFiat
	}
	return 0
}

func (x *OfferInfo) GetLiquidityCrypto() float64 {
	if x != nil {
		return x.LiquidityCrypto
	}
	return 0
}

func (x *OfferInfo) GetLimitMin() float64 {
	if x != nil {
		return x.LimitMin
	}
	return 0
}

func (x *OfferInfo) GetLimitMax() float64 {
	if x != nil {
		return x.LimitMax
	}
	return 0
}

func (x *OfferInfo) GetExchangeRate() float64 {
	if x != nil {
		return x.ExchangeRate
	}
	return 0
}

func (x *OfferInfo) GetTherms() string {
	if x != nil {
		return x.Therms
	}
	return ""
}

func (x *OfferInfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *OfferInfo) GetExpireOrderCreationTime() string {
	if x != nil {
		return x.ExpireOrderCreationTime
	}
	return ""
}

func (x *OfferInfo) GetNeedMerchant() bool {
	if x != nil {
		return x.NeedMerchant
	}
	return false
}

func (x *OfferInfo) GetFiatTech() string {
	if x != nil {
		return x.FiatTech
	}
	return ""
}

func (x *OfferInfo) GetCryptoTech() string {
	if x != nil {
		return x.CryptoTech
	}
	return ""
}

func (x *OfferInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *OfferInfo) GetIsFixed() bool {
	if x != nil {
		return x.IsFixed
	}
	return false
}

func (x *OfferInfo) GetPro() bool {
	if x != nil {
		return x.Pro
	}
	return false
}

func (x *OfferInfo) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

type UserOffer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Nickname string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Email    string `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"` // aa***aa@example.com
	Avatar   string `protobuf:"bytes,4,opt,name=avatar,proto3" json:"avatar,omitempty"`
	// string bio = 5; // *
	IsBLocked    bool   `protobuf:"varint,5,opt,name=isBLocked,proto3" json:"isBLocked,omitempty"`
	IsVerified   bool   `protobuf:"varint,6,opt,name=isVerified,proto3" json:"isVerified,omitempty"`
	BlockedUntil string `protobuf:"bytes,7,opt,name=blockedUntil,proto3" json:"blockedUntil,omitempty"`
	LastEntry    string `protobuf:"bytes,8,opt,name=lastEntry,proto3" json:"lastEntry,omitempty"`
	// string lastActivity = 10; // <>
	RegistrationDate string `protobuf:"bytes,9,opt,name=registrationDate,proto3" json:"registrationDate,omitempty"`
	Language         string `protobuf:"bytes,10,opt,name=language,proto3" json:"language,omitempty"`
	// bool isDnD = 13; // <>
	// int64 positiveFeedbacks = 14; // <>
	// int64 negativeFeedbacks = 15; // <>
	// double tradesCompletedPercent = 16; // <>
	// int64 totalTrades = 17; // <>
	Merchant   bool        `protobuf:"varint,11,opt,name=merchant,proto3" json:"merchant,omitempty"`
	Statistics *UserDataOf `protobuf:"bytes,12,opt,name=statistics,proto3" json:"statistics,omitempty"`
}

func (x *UserOffer) Reset() {
	*x = UserOffer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_offer_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserOffer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserOffer) ProtoMessage() {}

func (x *UserOffer) ProtoReflect() protoreflect.Message {
	mi := &file_market_offer_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserOffer.ProtoReflect.Descriptor instead.
func (*UserOffer) Descriptor() ([]byte, []int) {
	return file_market_offer_proto_rawDescGZIP(), []int{9}
}

func (x *UserOffer) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserOffer) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *UserOffer) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserOffer) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *UserOffer) GetIsBLocked() bool {
	if x != nil {
		return x.IsBLocked
	}
	return false
}

func (x *UserOffer) GetIsVerified() bool {
	if x != nil {
		return x.IsVerified
	}
	return false
}

func (x *UserOffer) GetBlockedUntil() string {
	if x != nil {
		return x.BlockedUntil
	}
	return ""
}

func (x *UserOffer) GetLastEntry() string {
	if x != nil {
		return x.LastEntry
	}
	return ""
}

func (x *UserOffer) GetRegistrationDate() string {
	if x != nil {
		return x.RegistrationDate
	}
	return ""
}

func (x *UserOffer) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *UserOffer) GetMerchant() bool {
	if x != nil {
		return x.Merchant
	}
	return false
}

func (x *UserOffer) GetStatistics() *UserDataOf {
	if x != nil {
		return x.Statistics
	}
	return nil
}

type UserDataOf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PositiveFeedbacks      int64   `protobuf:"varint,1,opt,name=positiveFeedbacks,proto3" json:"positiveFeedbacks,omitempty"`
	NegativeFeedbacks      int64   `protobuf:"varint,2,opt,name=negativeFeedbacks,proto3" json:"negativeFeedbacks,omitempty"`
	TradesCompletedPercent float64 `protobuf:"fixed64,3,opt,name=tradesCompletedPercent,proto3" json:"tradesCompletedPercent,omitempty"`
	TotalTrades            int64   `protobuf:"varint,4,opt,name=totalTrades,proto3" json:"totalTrades,omitempty"`
}

func (x *UserDataOf) Reset() {
	*x = UserDataOf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_offer_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDataOf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDataOf) ProtoMessage() {}

func (x *UserDataOf) ProtoReflect() protoreflect.Message {
	mi := &file_market_offer_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDataOf.ProtoReflect.Descriptor instead.
func (*UserDataOf) Descriptor() ([]byte, []int) {
	return file_market_offer_proto_rawDescGZIP(), []int{10}
}

func (x *UserDataOf) GetPositiveFeedbacks() int64 {
	if x != nil {
		return x.PositiveFeedbacks
	}
	return 0
}

func (x *UserDataOf) GetNegativeFeedbacks() int64 {
	if x != nil {
		return x.NegativeFeedbacks
	}
	return 0
}

func (x *UserDataOf) GetTradesCompletedPercent() float64 {
	if x != nil {
		return x.TradesCompletedPercent
	}
	return 0
}

func (x *UserDataOf) GetTotalTrades() int64 {
	if x != nil {
		return x.TotalTrades
	}
	return 0
}

type RequisiteOffer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstName string `protobuf:"bytes,1,opt,name=firstName,proto3" json:"firstName,omitempty"`
	// int64 tokenId = 2; // <>
	// int64 cryptoId = 3; // <>
	Surname string `protobuf:"bytes,2,opt,name=surname,proto3" json:"surname,omitempty"`
	IsHide  bool   `protobuf:"varint,3,opt,name=isHide,proto3" json:"isHide,omitempty"`
	Card    string `protobuf:"bytes,4,opt,name=card,proto3" json:"card,omitempty"`
	RId     string `protobuf:"bytes,5,opt,name=rId,proto3" json:"rId,omitempty"`
	// int64 id = 8; // <>
	Tech string `protobuf:"bytes,6,opt,name=tech,proto3" json:"tech,omitempty"`
}

func (x *RequisiteOffer) Reset() {
	*x = RequisiteOffer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_offer_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequisiteOffer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequisiteOffer) ProtoMessage() {}

func (x *RequisiteOffer) ProtoReflect() protoreflect.Message {
	mi := &file_market_offer_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequisiteOffer.ProtoReflect.Descriptor instead.
func (*RequisiteOffer) Descriptor() ([]byte, []int) {
	return file_market_offer_proto_rawDescGZIP(), []int{11}
}

func (x *RequisiteOffer) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *RequisiteOffer) GetSurname() string {
	if x != nil {
		return x.Surname
	}
	return ""
}

func (x *RequisiteOffer) GetIsHide() bool {
	if x != nil {
		return x.IsHide
	}
	return false
}

func (x *RequisiteOffer) GetCard() string {
	if x != nil {
		return x.Card
	}
	return ""
}

func (x *RequisiteOffer) GetRId() string {
	if x != nil {
		return x.RId
	}
	return ""
}

func (x *RequisiteOffer) GetTech() string {
	if x != nil {
		return x.Tech
	}
	return ""
}

var File_market_offer_proto protoreflect.FileDescriptor

var file_market_offer_proto_rawDesc = []byte{
	0x0a, 0x12, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6c, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x6a, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4f,
	0x66, 0x66, 0x65, 0x72, 0x73, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x25, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70,
	0x61, 0x67, 0x65, 0x73, 0x22, 0x50, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x66,
	0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xec, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x61, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x65, 0x73,
	0x74, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x62,
	0x65, 0x73, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x65, 0x73,
	0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x62, 0x65,
	0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x73, 0x6f, 0x72, 0x74, 0x22, 0x6c, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x25, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x61,
	0x67, 0x65, 0x73, 0x22, 0xc0, 0x05, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x66,
	0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x69, 0x71, 0x75,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x43, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x46,
	0x69, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x6c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x46, 0x69, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x69, 0x78, 0x65, 0x64, 0x12, 0x36,
	0x0a, 0x08, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4f, 0x66, 0x66, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x4d, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x4d, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x4d,
	0x61, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x4d,
	0x61, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x66, 0x69, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x12, 0x3c,
	0x0a, 0x19, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x19, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65,
	0x72, 0x6d, 0x12, 0x44, 0x0a, 0x0f, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x4f, 0x66, 0x66, 0x65,
	0x72, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x4f,
	0x66, 0x66, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x17, 0x45, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x17, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x7c, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4f, 0x66, 0x66, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x54, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x54, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x22, 0x91, 0x01, 0x0a, 0x09, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x2f, 0x0a, 0x09, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x4f,
	0x66, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4f,
	0x66, 0x66, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x6f, 0x66,
	0x66, 0x65, 0x72, 0x49, 0x73, 0x4e, 0x6f, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x73, 0x4e, 0x6f,
	0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0x95, 0x05, 0x0a, 0x09, 0x4f, 0x66, 0x66,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x65, 0x72,
	0x52, 0x08, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e,
	0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x0d, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x46, 0x69, 0x61, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x46, 0x69, 0x61, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74,
	0x79, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x6c,
	0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x4d, 0x61, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x4d, 0x61, 0x78, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x68,
	0x65, 0x72, 0x6d, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x68, 0x65, 0x72,
	0x6d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x65, 0x65, 0x64, 0x4d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6e, 0x65, 0x65, 0x64,
	0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x61, 0x74,
	0x54, 0x65, 0x63, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x61, 0x74,
	0x54, 0x65, 0x63, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x54, 0x65,
	0x63, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x54, 0x65, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x46, 0x69,
	0x78, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x46, 0x69, 0x78,
	0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x72, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x03, 0x70, 0x72, 0x6f, 0x12, 0x3a, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0xfd, 0x02, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x42, 0x4c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x42,
	0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x61,
	0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c,
	0x61, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x4f, 0x66, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x22, 0xc2, 0x01, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x66, 0x12,
	0x2c, 0x0a, 0x11, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x46, 0x65, 0x65, 0x64, 0x62,
	0x61, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x2c, 0x0a,
	0x11, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63,
	0x6b, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x73, 0x22, 0x9a, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x73,
	0x69, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x48, 0x69, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x69, 0x73, 0x48, 0x69, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x61, 0x72, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x61, 0x72, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x65, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65,
	0x63, 0x68, 0x32, 0xaa, 0x02, 0x0a, 0x05, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x0b,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x1a, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x2e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x41, 0x0a, 0x0b, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x1a, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x52, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x73,
	0x12, 0x1e, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1f, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4c, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x1c, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4f,
	0x66, 0x66, 0x65, 0x72, 0x73, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x66, 0x66,
	0x65, 0x72, 0x73, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x0a, 0x5a, 0x08, 0x2e, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_market_offer_proto_rawDescOnce sync.Once
	file_market_offer_proto_rawDescData = file_market_offer_proto_rawDesc
)

func file_market_offer_proto_rawDescGZIP() []byte {
	file_market_offer_proto_rawDescOnce.Do(func() {
		file_market_offer_proto_rawDescData = protoimpl.X.CompressGZIP(file_market_offer_proto_rawDescData)
	})
	return file_market_offer_proto_rawDescData
}

var file_market_offer_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_market_offer_proto_goTypes = []interface{}{
	(*GetOffersUserRequest)(nil),    // 0: market.GetOffersUserRequest
	(*GetOffersUserResponse)(nil),   // 1: market.GetOffersUserResponse
	(*DeleteOfferRequest)(nil),      // 2: market.DeleteOfferRequest
	(*GetActiveOffersRequest)(nil),  // 3: market.GetActiveOffersRequest
	(*GetActiveOffersResponse)(nil), // 4: market.GetActiveOffersResponse
	(*CreateOfferRequest)(nil),      // 5: market.CreateOfferRequest
	(*CreateOfferPayment)(nil),      // 6: market.CreateOfferPayment
	(*OfferData)(nil),               // 7: market.OfferData
	(*OfferInfo)(nil),               // 8: market.OfferInfo
	(*UserOffer)(nil),               // 9: market.UserOffer
	(*UserDataOf)(nil),              // 10: market.UserDataOf
	(*RequisiteOffer)(nil),          // 11: market.RequisiteOffer
	(*timestamppb.Timestamp)(nil),   // 12: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),           // 13: google.protobuf.Empty
}
var file_market_offer_proto_depIdxs = []int32{
	7,  // 0: market.GetOffersUserResponse.data:type_name -> market.OfferData
	7,  // 1: market.GetActiveOffersResponse.data:type_name -> market.OfferData
	6,  // 2: market.CreateOfferRequest.payments:type_name -> market.CreateOfferPayment
	12, // 3: market.CreateOfferRequest.ExpireOfferTime:type_name -> google.protobuf.Timestamp
	12, // 4: market.CreateOfferRequest.ExpireOrderCreationTime:type_name -> google.protobuf.Timestamp
	8,  // 5: market.OfferData.offerInfo:type_name -> market.OfferInfo
	9,  // 6: market.OfferData.user:type_name -> market.UserOffer
	11, // 7: market.OfferInfo.payments:type_name -> market.RequisiteOffer
	12, // 8: market.OfferInfo.createTime:type_name -> google.protobuf.Timestamp
	10, // 9: market.UserOffer.statistics:type_name -> market.UserDataOf
	5,  // 10: market.offer.CreateOffer:input_type -> market.CreateOfferRequest
	2,  // 11: market.offer.DeleteOffer:input_type -> market.DeleteOfferRequest
	3,  // 12: market.offer.GetActiveOffers:input_type -> market.GetActiveOffersRequest
	0,  // 13: market.offer.GetOffersUser:input_type -> market.GetOffersUserRequest
	7,  // 14: market.offer.CreateOffer:output_type -> market.OfferData
	13, // 15: market.offer.DeleteOffer:output_type -> google.protobuf.Empty
	4,  // 16: market.offer.GetActiveOffers:output_type -> market.GetActiveOffersResponse
	1,  // 17: market.offer.GetOffersUser:output_type -> market.GetOffersUserResponse
	14, // [14:18] is the sub-list for method output_type
	10, // [10:14] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_market_offer_proto_init() }
func file_market_offer_proto_init() {
	if File_market_offer_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_market_offer_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOffersUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_offer_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOffersUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_offer_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOfferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_offer_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActiveOffersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_offer_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActiveOffersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_offer_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOfferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_offer_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOfferPayment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_offer_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfferData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_offer_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfferInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_offer_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserOffer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_offer_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDataOf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_offer_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequisiteOffer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_market_offer_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_market_offer_proto_goTypes,
		DependencyIndexes: file_market_offer_proto_depIdxs,
		MessageInfos:      file_market_offer_proto_msgTypes,
	}.Build()
	File_market_offer_proto = out.File
	file_market_offer_proto_rawDesc = nil
	file_market_offer_proto_goTypes = nil
	file_market_offer_proto_depIdxs = nil
}
