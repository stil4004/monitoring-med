// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package market

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrderClient is the client API for Order service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderClient interface {
	GetOrdersByOffer(ctx context.Context, in *GetOrdersByOfferRequest, opts ...grpc.CallOption) (*GetOrdersByOfferResponse, error)
	InitOrder(ctx context.Context, in *InitOrderRequest, opts ...grpc.CallOption) (*InitOrderResponse, error)
	DeclineOrder(ctx context.Context, in *DeclineOrderRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetOrdersMe(ctx context.Context, in *GetOrdersMeRequest, opts ...grpc.CallOption) (*GetOrdersMeResponse, error)
	HandleTakerPayed(ctx context.Context, in *HandlePayedRequest, opts ...grpc.CallOption) (*HandleTakerPayedResponse, error)
	HandleMakerPayed(ctx context.Context, in *HandlePayedRequest, opts ...grpc.CallOption) (*HandleMakerPayedResponse, error)
}

type orderClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderClient(cc grpc.ClientConnInterface) OrderClient {
	return &orderClient{cc}
}

func (c *orderClient) GetOrdersByOffer(ctx context.Context, in *GetOrdersByOfferRequest, opts ...grpc.CallOption) (*GetOrdersByOfferResponse, error) {
	out := new(GetOrdersByOfferResponse)
	err := c.cc.Invoke(ctx, "/market.order/GetOrdersByOffer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) InitOrder(ctx context.Context, in *InitOrderRequest, opts ...grpc.CallOption) (*InitOrderResponse, error) {
	out := new(InitOrderResponse)
	err := c.cc.Invoke(ctx, "/market.order/InitOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) DeclineOrder(ctx context.Context, in *DeclineOrderRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/market.order/DeclineOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) GetOrdersMe(ctx context.Context, in *GetOrdersMeRequest, opts ...grpc.CallOption) (*GetOrdersMeResponse, error) {
	out := new(GetOrdersMeResponse)
	err := c.cc.Invoke(ctx, "/market.order/GetOrdersMe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) HandleTakerPayed(ctx context.Context, in *HandlePayedRequest, opts ...grpc.CallOption) (*HandleTakerPayedResponse, error) {
	out := new(HandleTakerPayedResponse)
	err := c.cc.Invoke(ctx, "/market.order/HandleTakerPayed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) HandleMakerPayed(ctx context.Context, in *HandlePayedRequest, opts ...grpc.CallOption) (*HandleMakerPayedResponse, error) {
	out := new(HandleMakerPayedResponse)
	err := c.cc.Invoke(ctx, "/market.order/HandleMakerPayed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderServer is the server API for Order service.
// All implementations must embed UnimplementedOrderServer
// for forward compatibility
type OrderServer interface {
	GetOrdersByOffer(context.Context, *GetOrdersByOfferRequest) (*GetOrdersByOfferResponse, error)
	InitOrder(context.Context, *InitOrderRequest) (*InitOrderResponse, error)
	DeclineOrder(context.Context, *DeclineOrderRequest) (*emptypb.Empty, error)
	GetOrdersMe(context.Context, *GetOrdersMeRequest) (*GetOrdersMeResponse, error)
	HandleTakerPayed(context.Context, *HandlePayedRequest) (*HandleTakerPayedResponse, error)
	HandleMakerPayed(context.Context, *HandlePayedRequest) (*HandleMakerPayedResponse, error)
	mustEmbedUnimplementedOrderServer()
}

// UnimplementedOrderServer must be embedded to have forward compatible implementations.
type UnimplementedOrderServer struct {
}

func (UnimplementedOrderServer) GetOrdersByOffer(context.Context, *GetOrdersByOfferRequest) (*GetOrdersByOfferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrdersByOffer not implemented")
}
func (UnimplementedOrderServer) InitOrder(context.Context, *InitOrderRequest) (*InitOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitOrder not implemented")
}
func (UnimplementedOrderServer) DeclineOrder(context.Context, *DeclineOrderRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeclineOrder not implemented")
}
func (UnimplementedOrderServer) GetOrdersMe(context.Context, *GetOrdersMeRequest) (*GetOrdersMeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrdersMe not implemented")
}
func (UnimplementedOrderServer) HandleTakerPayed(context.Context, *HandlePayedRequest) (*HandleTakerPayedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleTakerPayed not implemented")
}
func (UnimplementedOrderServer) HandleMakerPayed(context.Context, *HandlePayedRequest) (*HandleMakerPayedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleMakerPayed not implemented")
}
func (UnimplementedOrderServer) mustEmbedUnimplementedOrderServer() {}

// UnsafeOrderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderServer will
// result in compilation errors.
type UnsafeOrderServer interface {
	mustEmbedUnimplementedOrderServer()
}

func RegisterOrderServer(s grpc.ServiceRegistrar, srv OrderServer) {
	s.RegisterService(&Order_ServiceDesc, srv)
}

func _Order_GetOrdersByOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrdersByOfferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).GetOrdersByOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/market.order/GetOrdersByOffer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).GetOrdersByOffer(ctx, req.(*GetOrdersByOfferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_InitOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).InitOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/market.order/InitOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).InitOrder(ctx, req.(*InitOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_DeclineOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeclineOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).DeclineOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/market.order/DeclineOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).DeclineOrder(ctx, req.(*DeclineOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_GetOrdersMe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrdersMeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).GetOrdersMe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/market.order/GetOrdersMe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).GetOrdersMe(ctx, req.(*GetOrdersMeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_HandleTakerPayed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandlePayedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).HandleTakerPayed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/market.order/HandleTakerPayed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).HandleTakerPayed(ctx, req.(*HandlePayedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_HandleMakerPayed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandlePayedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).HandleMakerPayed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/market.order/HandleMakerPayed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).HandleMakerPayed(ctx, req.(*HandlePayedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Order_ServiceDesc is the grpc.ServiceDesc for Order service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Order_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "market.order",
	HandlerType: (*OrderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOrdersByOffer",
			Handler:    _Order_GetOrdersByOffer_Handler,
		},
		{
			MethodName: "InitOrder",
			Handler:    _Order_InitOrder_Handler,
		},
		{
			MethodName: "DeclineOrder",
			Handler:    _Order_DeclineOrder_Handler,
		},
		{
			MethodName: "GetOrdersMe",
			Handler:    _Order_GetOrdersMe_Handler,
		},
		{
			MethodName: "HandleTakerPayed",
			Handler:    _Order_HandleTakerPayed_Handler,
		},
		{
			MethodName: "HandleMakerPayed",
			Handler:    _Order_HandleMakerPayed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "market/order.proto",
}
