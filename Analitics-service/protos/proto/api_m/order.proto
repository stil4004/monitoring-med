syntax = "proto3";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

//protoc -I proto proto/market/*.proto --go_out=./gen/go/ --go_opt=paths=source_relative --go-grpc_out=./gen/go/ --go-grpc_opt=paths=source_relative

package api_m;

option go_package = "./api_m";


// TODO add update order (activate and MA TA)
service order {
  rpc GetOrdersByOffer(GetOrdersByOfferRequest) returns (GetOrdersByOfferResponse);
  rpc InitOrder(InitOrderRequest) returns (InitOrderResponse);
  rpc DeclineOrder(DeclineOrderRequest) returns (google.protobuf.Empty); //  POSTHandleDeclineOrder
  rpc GetOrdersMe(GetOrdersMeRequest) returns (GetOrdersMeResponse);
  rpc HandleTakerPayed(HandlePayedRequest) returns (HandleTakerPayedResponse);
  rpc HandleMakerPayed(HandlePayedRequest) returns (HandleMakerPayedResponse);
}


message HandleMakerPayedResponse {
  HandleMakerApprovedInfo data = 1;
}

message HandleMakerApprovedInfo {
  TakerInfo takerInfo = 1;
  Order orderInfo = 2;
}

// TODO access
message HandlePayedRequest {
  string internalOrderId = 1;
}

message HandleTakerPayedResponse {
  HandleTackerApprovedInfo data = 1;
}

message HandleTackerApprovedInfo {
  TakerInfo takerInfo = 1;
  Order orderInfo = 2;
}

message TakerInfo {
  string internalId = 1; // payment internalId
  string card = 2;
  string bank = 3;
  string fio = 4;
  double amount = 5;
}

message Order {
  google.protobuf.Timestamp takerApprovedUpdateTime = 1;
  google.protobuf.Timestamp makerApprovedUpdateTime = 2;
  string internalId = 3;
  bool takerApproved = 4;
  bool makerApproved = 5;
  string internalOfferId = 6;
  double amountFiat = 7;
  double amountCrypto = 8;
  string tokenTo = 9;
  string tokenFrom = 10;
  google.protobuf.Timestamp createTime = 11;
  google.protobuf.Timestamp expireOffer = 12;
  string chatId = 13;
  string status = 14;
  string makerNickname = 15;
  string takerNickname = 16;
  double rate = 17;
  string type = 18;
  string receipt = 19;
  string description = 20;
  bool makerCanApprove = 21;
  Payment payment = 22;
}

// TODO access then clientId
message GetOrdersMeRequest {
  google.protobuf.Timestamp dateFrom = 1;
  string currency = 2;
  google.protobuf.Timestamp dateTo = 3;
  string status = 4;
  int64 limit = 5;
  string role = 6; // maker or taker ?
  string type = 7; // buy or sell ?
  int64 page = 8;
  string archive = 9; // фильтр с фронта outarchive
  string searchFields = 10; // пример
}

message GetOrdersMeResponse {
  ResponseGetOrdersMeModel data = 1;
}

message ResponseGetOrdersMeModel {
  int64 total = 1;
  int64 pages = 2;
  repeated Order data = 3;
}



message Payment {
  google.protobuf.Timestamp createTime = 1;
  string internalId = 2;
  string tokenFrom = 3;
  string tokenTo = 4;
  string firstName = 5;
  string lastName = 6;
  string address = 7;
}

// TODO access
message DeclineOrderRequest {
  string internalId = 1;
  repeated uint32 reasonId = 2; // endpoint with reasons

//  string access = 3; // delete nahui
}

message ResponseOrderModelWithChat {
  Order order = 1;
  UserOr user = 2;
}

message OrderRequisite {
  string wallet = 1;
  string token = 2;
  double amount = 3;
  string internalId = 4;
  string fio = 5;
//  int64 orderId = 6; // <>
//  int64 offerId = 7; // <>
//  int64 id = 8; // <>
}

message UserOr {
//  string registrationDate = 1;
//  string blockedUntil = 2;
  bool isBlocked = 1;
  string lastEntry = 2;
  string nickname = 3;
  string language = 4;
  string avatar = 5;
  int64 id = 6;
  string email = 7;
  string role = 8;
  string bio = 9;
  int64 positiveFeedbacks = 10;
  int64 negativeFeedbacks = 11;
  double tradesCompletedPercent = 12;
  int64 totalTrades = 13;
}

message GetOrdersByOfferRequest {
  string executorAmount = 1; // used
  string paymentDetails = 2; // used
  string creatorAmount = 3; // limits (100-1000)?
  string internalId = 4;
  string tokenFrom = 5;
  string tokenTo = 6;
  string status = 7;
  string page = 8; // page
  string limit = 9;
}

message GetOrdersByOfferResponse {
  repeated ResponseOrderModel data = 1;
}

message ResponseOrderModel {
  Order order = 1;
  UserOr user = 2;
}

message InitOrderRequest {
  string internalOfferId = 1;
  string address = 2;
  string paymentId = 3;
  string takerNickname = 4;
  string makerNickname = 5;
//  int64 takerId = 6; // delete nahui мб ручка по ордеру как-то получать айдишник
//  int64 makerId = 7; // delete nahui
  string crypto = 6;
  string fiat = 7;
  double amountFrom = 8;
  double amountTo = 9;
  double fixAmount = 10;
//  double twa = 11; // delete nahui -- wil be fix
}

message InitOrderResponse {
  string internalId = 1;
}
